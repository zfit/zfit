name: tests

env:
  UV_SYSTEM_PYTHON: 1

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main
      - develop
      - "release/*"
      - "hotfix/*"
  pull_request:
    branches-ignore:
      - "docs/*"
      - "doc/*"

jobs:
  check-ci-scope:
    name: Initialize CI runs
    runs-on: ubuntu-latest
    outputs:
      run-full-ci: ${{ steps.check.outputs.run-full-ci }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: check
        name: Check if full CI is needed
        run: |
          # Check if we're on main, develop, or release/* branches
          if [[ "$GITHUB_REF" == "refs/heads/main" || "$GITHUB_REF" == "refs/heads/develop" || "$GITHUB_REF" =~ ^refs/heads/release/ ]]; then
            echo "run-full-ci=true" >> $GITHUB_OUTPUT
            echo "Running full CI because we're on main, develop, or a release branch"
            exit 0
          fi
          
          # Check if [full ci] or similar is in the commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"[full ci]"* || "$COMMIT_MSG" == *"[ci full]"* || "$COMMIT_MSG" == *"[cifull]"* || "$COMMIT_MSG" == *"[fullci]"* ]]; then
            echo "run-full-ci=true" >> $GITHUB_OUTPUT
            echo "Running full CI because @fullci was found in the commit message"
            exit 0
          fi
          
          # Otherwise, run limited CI
          echo "run-full-ci=false" >> $GITHUB_OUTPUT
          echo "Running limited CI"
  full-checks-run:
    needs: check-ci-scope
    runs-on: ubuntu-latest
    name: Full CI checks run
    steps:
      - name: Full set run
        run: |
          if [ "${{ needs.check-ci-scope.outputs.run-full-ci }}" == "true" ]; then
               exit 0
          else
               echo "Only limited set of CI and tests will be run. To run the full set, please add [full ci] to the commit message.";
               echo "Note that the whole set is run by default on main, develop, and release branches.";
               exit 1
          fi

  unittests:
    needs: check-ci-scope
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 200 # for eager mode
    name: tests on ${{ matrix.os }} with ${{ matrix.python-version }} compiled = ${{ matrix.use-graph }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    strategy:
      max-parallel: 15
      fail-fast: false
      matrix:
        use-graph: [ 1 ]
        python-version: [ "3.9" ]  # omit "3.10", "3.11" to save compute time
        os: [ ubuntu-latest ]
        extras: [ test ]
        run: [ true ]
        include:
          - os: ubuntu-latest
            extras: test
            python-version: "3.12"
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
            use-graph: 1
          - os: ubuntu-latest
            extras: test
            python-version: "3.12"
            use-graph: 0
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
          - os: macos-latest
            python-version: "3.12"
            use-graph: 1
            extras: test
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
          - os: windows-latest
            python-version: "3.12"
            use-graph: 1
            extras: test
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
          - os: macos-14  # Apple silicon runner
            python-version: '3.12'
            use-graph: 1
            extras: test
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      # do not install ROOT on windows, fails
      - uses: mamba-org/setup-micromamba@v2
        if: runner.os != 'Windows'
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
            root
      - uses: mamba-org/setup-micromamba@v2
        if: runner.os == 'Windows'
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
      - name: Install dependencies
        run: |
          uv pip install coverage-lcov pytest-xdist pytest-cov
          uv pip install .[${{ matrix.extras }}]
      - name: Check imports
        run: python -c "import zfit; from zfit import *"
      - name: Test with pytest
        if: ${{ matrix.run }}
        run: |
          if [ ${{ needs.check-ci-scope.outputs.run-full-ci }} == "true" ]; then
            echo "Running full tests"
            pytest --doctest-modules --cov=. --cov-config=pyproject.toml -n auto --longtests --longtests-kde --cov-report=xml --cov-report=term-missing
          else
            echo "Running limited tests"
            pytest --doctest-modules --cov=. --cov-config=pyproject.toml -n auto --cov-report=xml --cov-report=term-missing
          fi

  docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: [ "3.9" ]
    name: Testbuild docs
    steps:
      - uses: actions/checkout@v4
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v2
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
            root
      - name: Install dependencies
        run: |
          uv pip install .[docs]
      - name: Build the docs, check for failure
        run: |
          bash utils/ci/testbuild_docs.sh

  tutorials:
    needs: check-ci-scope
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 150  # eager mode takes some time
    strategy:
      max-parallel: 8
      fail-fast: False
      matrix:
        use-graph: [ 1 ]
        python-version: [ "3.9" ]
        run: [ true ]
        extras: [ all ]
        include:
          - python-version: "3.12"
            use-graph: 0
            extras: all
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
          - python-version: "3.12"
            use-graph: 0
            extras: all
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
    name: Run tutorials, Python ${{ matrix.python-version }}, compiled = ${{ matrix.use-graph }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    steps:
      - uses: actions/checkout@v4
        if: ${{ matrix.run }}
      - name: Get history and tags for SCM versioning to work
        if: ${{ matrix.run }}
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v2
        if: ${{ matrix.run }}
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
      - name: Clone Tutorials
        if: ${{ matrix.run }}
        run: |
          git clone https://github.com/zfit/zfit-tutorials.git
      - name: Install dependencies
        if: ${{ matrix.run }}
        run: |
          uv pip install -U .[${{ matrix.extras }}] -r zfit-tutorials/requirements.txt nbval pytest-helpers-namespace pytest-xdist
      - name: Run notebooks
        if: ${{ matrix.run }}
        run: |
          pytest --nbval-lax zfit-tutorials --dist loadscope --ignore=zfit-tutorials/experimental --ignore=zfit-tutorials/_unused --ignore=zfit-tutorials/_website -n auto

  examples:
    needs: check-ci-scope
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 120
    strategy:
      max-parallel: 8
      fail-fast: False
      matrix:
        use-graph: [ 1 ]
        python-version: [ "3.9" ]
        run: [ true ]
        include:
          - python-version: "3.12"
            use-graph: 1
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
          - python-version: "3.12"
            use-graph: 0
            run: ${{ needs.check-ci-scope.outputs.run-full-ci == 'true' }}
    name: Run examples, Python ${{ matrix.python-version }}, compiled = ${{ matrix.use-graph }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    steps:
      - uses: actions/checkout@v4
        if: ${{ matrix.run }}
      - name: Get history and tags for SCM versioning to work
        if: ${{ matrix.run }}
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v2
        if: ${{ matrix.run }}
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
      - name: Install dependencies
        if: ${{ matrix.run }}
        run: |
          uv pip install .[all] mplhep  # for example plots
      - name: Run examples
        if: ${{ matrix.run }}
        run: |
          
          fail=0
          for file in ${{ github.workspace }}/examples/*.py; do
            echo "----------------------------------------------------------------------------------------------"
            echo "Running example: $file"
            echo "----------------------------------------------------------------------------------------------"
            python "$file" || { fail=$((fail+1)) && echo "Failed running example: $file"; }
            echo "----------------------------------------------------------------------------------------------"
            echo "Finished example: $file"
            echo "----------------------------------------------------------------------------------------------"
          done
            if [ $fail -ne 0 ]; then
                echo "Some examples failed"
                exit 1
            else
                echo "All examples passed"
            fi

  finish:
    needs: unittests
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2.3.6
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true
