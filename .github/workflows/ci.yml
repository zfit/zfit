name: tests

env:
  UV_SYSTEM_PYTHON: 1

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main
      - develop
      - "release/*"
      - "hotfix/*"
  pull_request:
    branches-ignore:
      - "docs/*"
      - "doc/*"

jobs:
  check-run-type:
    runs-on: ubuntu-latest
    outputs:
      run-full-ci: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/') || contains(github.event.head_commit.message, '@fullci') }}
    steps:
      - name: Check run type
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop" || "${{ github.ref }}" == "refs/heads/release/*" || "${{ contains(github.event.head_commit.message, '@fullci') }}" == "true" ]]; then
            echo "Running full CI pipeline"
            echo "run-full-ci=true" >> $GITHUB_OUTPUT
          else
            echo "Running reduced CI pipeline" 
            echo "run-full-ci=false" >> $GITHUB_OUTPUT
          fi

  unittests:
    needs: check-run-type
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 200
    strategy:
      matrix:
        include:
          # Always included configuration (reduced CI)
          - os: ubuntu-latest
            extras: test
            python-version: "3.9"
            use-graph: 1
          # Configurations for full CI only
          - os: ubuntu-latest
            extras: test
            python-version: "3.12"
            use-graph: 1
            full-ci-only: true
          - os: ubuntu-latest
            extras: test
            python-version: "3.12"
            use-graph: 0
            full-ci-only: true
          - os: macos-latest
            python-version: "3.12"
            use-graph: 1
            extras: test
            full-ci-only: true
          - os: windows-latest
            python-version: "3.12"
            use-graph: 1
            extras: test
            full-ci-only: true
          - os: macos-14
            python-version: '3.12'
            use-graph: 1
            extras: test
            full-ci-only: true
    if: ${{ needs.check-run-type.outputs.run-full-ci == 'true' || !matrix.full-ci-only }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    steps:
      - name: Get CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - uses: actions/checkout@v4
      - name: Get history and tags
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v2
        if: runner.os != 'Windows'
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
            root
      - uses: mamba-org/setup-micromamba@v2
        if: runner.os == 'Windows'
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
      - name: Install dependencies
        run: |
          uv pip install coverage-lcov pytest-xdist pytest-cov
          uv pip install .[${{ matrix.extras }}]
      - name: Test with pytest
        run: |
          echo "PYTEST_ADDOPTS=--longtests-kde --longtests" >> "$GITHUB_ENV"
          pytest --cov=. --cov-config=pyproject.toml -n auto --cov-report=xml --cov-report=term-missing

  #          pytest --cov=. --cov-config=pyproject.toml -n auto --cov-report=xml --cov-report=term-missing  # logical number of cpus, falls back to auto
  #               TODO: fails on windows? add again above pytest?
  #          if [ "$GITHUB_REF" == 'refs/heads/develop' ]; then
  #            echo "PYTEST_ADDOPTS=--longtests-kde --longtests" >> "$GITHUB_ENV"
  #          fi
  #           convert to lcov format
  #          mkdir coverage && coverage-lcov --output_file_path ./coverage/lcov.info
  #      # TODO(jonas): fix coverage report? Needs converter to lcov format
  #      - name: Coveralls Parallel
  #        uses: coverallsapp/github-action@v2.3.6
  #        with:
  #          github-token: ${{ secrets.github_token }}
  #          flag-name: run-${{ matrix.use-graph }}-${{ matrix.python-version }}-ubuntu
  #          parallel: true
  docs:
    needs: check-run-type
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - uses: actions/checkout@v4
      - name: Get history and tags
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v2
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
            root
      - name: Install dependencies
        run: |
          uv pip install .[docs]
      - name: Build docs
        run: |
          bash utils/ci/testbuild_docs.sh

  tutorials:
    needs: check-run-type
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 150
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            extras: all
            python-version: "3.9"
            use-graph: 1
          - os: ubuntu-latest
            extras: all
            python-version: "3.12"
            use-graph: 1
            full-ci-only: true
          - os: ubuntu-latest
            extras: all
            python-version: "3.12"
            use-graph: 0
            full-ci-only: true
    if: ${{ needs.check-run-type.outputs.run-full-ci == 'true' || !matrix.full-ci-only }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    steps:
      - name: Get CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - uses: actions/checkout@v4
      - name: Get history and tags
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v2
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
#            root

      - name: Clone Tutorials
        run: |
          git clone https://github.com/zfit/zfit-tutorials.git
      - name: Install dependencies
        run: |
          uv pip install nbval pytest-helpers-namespace pytest-xdist
          uv pip install -U .[all]
          uv pip install -r zfit-tutorials/requirements.txt
      - name: Run notebooks
        run: |
          pytest --nbval-lax zfit-tutorials --dist loadscope --ignore=zfit-tutorials/experimental --ignore=zfit-tutorials/_unused --ignore=zfit-tutorials/_website -n${{ steps.cpu-cores.outputs.count }}

  examples:
    needs: check-run-type
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 120
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            extras: all
            python-version: "3.9"
            use-graph: 1
          - os: ubuntu-latest
            extras: all
            python-version: "3.12"
            use-graph: 1
            full-ci-only: true
          - os: ubuntu-latest
            extras: all
            python-version: "3.12"
            use-graph: 0
            full-ci-only: true
    if: ${{ needs.check-run-type.outputs.run-full-ci == 'true' || !matrix.full-ci-only }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    steps:
      - uses: actions/checkout@v4
      - name: Get history and tags
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v2
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
      - name: Install dependencies
        run: |
          uv pip install .[all]
      - name: Run examples
        run: |
          BASEDIR=$( dirname -- "$0"; )
          fail=0
          for file in ${BASEDIR}/../../examples/*.py; do
            echo "Running example: $file"
            python "$file" || { fail=$((fail+1)) && echo "Failed running example: $file"; }
            echo "Finished example: $file"
          done

  finish:
    needs: [ check-run-type, unittests ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2.3.6
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true
