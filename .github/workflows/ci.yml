name: tests

env:
  UV_SYSTEM_PYTHON: 1

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main
      - develop
      - "release/*"
      - "hotfix/*"
  pull_request:
    branches-ignore:
      - "docs/*"
      - "doc/*"

jobs:
  unittests:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 200 # for eager mode
    name: tests on ${{ matrix.os }} with ${{ matrix.python-version }} compiled = ${{ matrix.use-graph }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    strategy:
      max-parallel: 15
      fail-fast: False
      matrix:
        use-graph: [ 1 ]
        python-version: [ "3.9", "3.12" ]  # omit "3.10", "3.11" to save compute time
        os: [ ubuntu-latest ]
        #        os: [ self-hosted ]
        extras: [ alldev ]
        include:
          - os: ubuntu-latest
            extras: alldev
            python-version: "3.12"
            use-graph: 0
          - os: macos-latest
            python-version: "3.12"
            use-graph: 1
            extras: alldev
          - os: windows-latest
            python-version: "3.12"
            use-graph: 1
            extras: alldev
          - os: macos-14  # Apple silicon runner
            python-version: '3.12'
            use-graph: 1
            extras: alldev

    steps:
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      #      - run: echo "ZFIT_HALF_NCORES=$((steps.cpu-cores.outputs.count))" >> $GITHUB_ENV  # todo: set number of cores a bit lower, memory?
      #        id: set-ncpus
      - uses: actions/checkout@v4
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
          init-shell: >-
            bash
            zsh
      - name: Install ROOT (if not on windows)
        if: runner.os != 'Windows'
        run: |
          mamba install root -y
      - name: Install dependencies
        run: |
          uv pip install coverage-lcov pytest-xdist pytest-cov
          uv pip install .[${{ matrix.extras }}]
      - name: Test with pytest
        run: |
          pytest --cov=. --cov-config=pyproject.toml -n auto --cov-report=xml --cov-report=term-missing

  #          pytest --cov=. --cov-config=pyproject.toml -n auto --cov-report=xml --cov-report=term-missing  # logical number of cpus, falls back to auto
  #               TODO: fails on windows? add again above pytest?
  #          if [ "$GITHUB_REF" == 'refs/heads/develop' ]; then
  #            echo "PYTEST_ADDOPTS=--longtests-kde --longtests" >> "$GITHUB_ENV"
  #          fi
  #           convert to lcov format
  #          mkdir coverage && coverage-lcov --output_file_path ./coverage/lcov.info
  #      # TODO(jonas): fix coverage report? Needs converter to lcov format
  #      - name: Coveralls Parallel
  #        uses: coverallsapp/github-action@v2.3.0
  #        with:
  #          github-token: ${{ secrets.github_token }}
  #          flag-name: run-${{ matrix.use-graph }}-${{ matrix.python-version }}-ubuntu
  #          parallel: true
  docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: [ "3.12" ]
    name: Testbuild docs
    steps:
      - uses: actions/checkout@v4
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
            root
      #      - uses: actions/setup-python@v5
      #        name: Set up Python ${{ matrix.python-version }}
      #        with:
      #          python-version: ${{ matrix.python-version }}
      #      - name: Get pip cache dir
      #        id: pip-cache
      #        run: |
      #          echo "::set-output name=dir::$(pip cache dir)"
      #      - name: pip cache
      #        uses: actions/cache@v4.0.2
      #        with:
      #          path: ${{ steps.pip-cache.outputs.dir }}
      #          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-pip-${{ hashFiles('**/requirements_dev.txt') }}-pip-${{ hashFiles('**/pyproject.toml') }}-pip-${{ hashFiles('**/setup.cfg') }}-pip-${{ hashFiles('**/setup.py') }}
      #          restore-keys: |
      #            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          uv pip install .[docs]
      - name: Build the docs, check for failure
        run: |
          bash utils/ci/testbuild_docs.sh

  tutorials:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 150  # eager mode takes some time
    strategy:
      max-parallel: 8
      fail-fast: False
      matrix:
        use-graph: [ 1 ]
        python-version: [ "3.9", "3.12" ]
        include:
          - os: ubuntu-latest
            extras: all
            python-version: "3.12"
            use-graph: 0
    name: Run tutorials, Python ${{ matrix.python-version }}, compiled = ${{ matrix.use-graph }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    steps:
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - uses: actions/checkout@v4
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
            root
      #      - uses: actions/setup-python@v5
      #        name: Set up Python ${{ matrix.python-version }}
      #
      #        with:
      #          python-version: ${{ matrix.python-version }}

      - name: Clone Tutorials
        run: |
          git clone https://github.com/zfit/zfit-tutorials.git

      #      - name: Get pip cache dir
      #        id: pip-cache
      #        run: |
      #          echo "::set-output name=dir::$(pip cache dir)"
      #      - name: pip cache
      #        uses: actions/cache@v4.0.2
      #        with:
      #          path: ${{ steps.pip-cache.outputs.dir }}
      #          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-pip-${{ hashFiles('**/requirements_dev.txt') }}-pip-${{ hashFiles('**/pyproject.toml') }}-pip-${{ hashFiles('**/setup.cfg') }}-pip-${{ hashFiles('**/setup.py') }}
      #          restore-keys: |
      #            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          uv pip install nbval pytest-helpers-namespace pytest-xdist
          uv pip install -U .[all]
          uv pip install -r zfit-tutorials/requirements.txt
      #          uv pip install -U --force-reinstall .[all]  # yep. Needed. Otherwise i.e. numpy needs to be upgraded

      - name: Run notebooks
        run: |
          pytest --nbval-lax zfit-tutorials --dist loadscope --ignore=zfit-tutorials/experimental --ignore=zfit-tutorials/_unused --ignore=zfit-tutorials/_website -n${{ steps.cpu-cores.outputs.count }}
  examples:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 120
    strategy:
      max-parallel: 8
      fail-fast: False
      matrix:
        use-graph: [ 1 ]
        python-version: [ "3.9", "3.11" ]  # todo: upgrade to 3.12 if nlopt available for 3.12
        include:
          - os: ubuntu-latest
            extras: alldev-linux
            python-version: "3.11"
            use-graph: 0
    name: Run examples, Python ${{ matrix.python-version }}, compiled = ${{ matrix.use-graph }}
    env:
      ZFIT_DO_JIT: ${{ matrix.use-graph }}
    steps:
      - uses: actions/checkout@v4
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: zfit
          create-args: >-
            python=${{ matrix.python-version }}
            uv
            root
      - name: Install dependencies
        run: |
          uv pip install .[all]
      #      - uses: actions/setup-python@v5
      #        name: Set up Python ${{ matrix.python-version }}
      #        with:
      #          python-version: ${{ matrix.python-version }}
      #      - name: Get pip cache dir
      #        id: pip-cache
      #        run: |
      #          echo "::set-output name=dir::$(pip cache dir)"
      #      - name: pip cache
      #        uses: actions/cache@v4.0.2
      #        with:
      #          path: ${{ steps.pip-cache.outputs.dir }}
      #          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-pip-${{ hashFiles('**/requirements_dev.txt') }}-pip-${{ hashFiles('**/pyproject.toml') }}-pip-${{ hashFiles('**/setup.cfg') }}-pip-${{ hashFiles('**/setup.py') }}
      #          restore-keys: |
      #            ${{ runner.os }}-pip-

      - name: Run examples
        run: |
          BASEDIR=$( dirname -- "$0"; )
          fail=0
          for file in ${BASEDIR}/../../examples/*.py; do
          echo "----------------------------------------------------------------------------------------------"
          echo "Running example: $file"
          echo "----------------------------------------------------------------------------------------------"
          python "$file" || { fail=$((fail+1)) && echo "Failed running example: $file"; }
          echo "----------------------------------------------------------------------------------------------"
          echo "Finished example: $file"
          echo "----------------------------------------------------------------------------------------------"
          done

  finish:
    needs: unittests
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2.3.0
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true
