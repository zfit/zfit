[build-system]
requires = [
    "setuptools>=42",
    "setuptools_scm[toml]>=3.4",
    "setuptools_scm_git_archive",
    "wheel"
]

build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-Wd -ra -q"
testpaths = [
    "tests",
    "tests/*",
]
markers = [
    "plots: create and safe plots",
]
console_output_style = "progress"
collect_ignore = "setup.py"

[tool.coverage.run]
branch = true
relative_files = true
omit = [
    # omit anything in a .local directory anywhere
    ".tox/*",
    "*/tests/*",
    "*minimizers/interface.py",
    "*/core/testing.py",
]

[tool.coverage.report]
# fails in CI? not known config?
## Regexes for lines to exclude from consideration
#exclude_also = [
#    # Don't complain if tests don't hit defensive assertion code:
#    "raise AssertionError",
#    "raise NotImplementedError",
#    # Don't complain if non-runnable code isn't run:
#    "if __name__ == .__main__.:",
#    # Don't complain about abstract methods, they aren't run:
#    "@(abc\\.)?abstractmethod",
#]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.ruff]
#src = ["src"]
line-length = 120
exclude = [
    ".tox/*",
    "*/test*",
    "*/__init__.py",
    "*/_version.py",
]
[tool.ruff.lint]
extend-select = [
    "B",        # flake8-bugbear
    "I",        # isort
    "ARG",      # flake8-unused-arguments
    "C4",       # flake8-comprehensions
    "EM",       # flake8-errmsg
    "ICN",      # flake8-import-conventions
    "G",        # flake8-logging-format
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "RET",      # flake8-return
    "RUF",      # Ruff-specific
    "SIM",      # flake8-simplify
    "T20",      # flake8-print
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "EXE",      # flake8-executable
    "NPY",      # NumPy specific rules
    "PD",       # pandas-vet
]
ignore = [
    "UP007",    # type annotation upgrade, breaks pydantic for Python 3.9 (remove once above)
    "PLR09",    # Too many <...>
    "PLR2004",  # Magic value used in comparison
    "ISC001",   # Conflicts with formatter
    "RET505",   # This is sometimes wanted, protets against accidental intendation
    "PD901",    # "avoid using `df[...].values`" -> no, this is a very good name if there is only one df
    "PD011",    # "replace `df[...].values` with `df[...].to_numpy()`" -> not yet, it's not deprecated.
    # Prefer to have a single way to access the data if we don't care about whether it's a numpy array or not.
    "PLW0603",  # updating global variables with a function is bad, but we use it for
    "PLW2901",  # "for loop overwritten by assignment" -> we use this to update the loop variable
    "PD013",    # "melt over stack": df function, but triggers on tensors
    "NPY002",   # "Use rnd generator in numpy" -> we use np.random for some legacy stuff but do use the new one where we can

]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
